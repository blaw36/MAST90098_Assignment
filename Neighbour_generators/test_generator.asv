k = 2;
L = [2];
M =  [2,3,1,2];

g = NeighbourhoodGenerator2(k, L, M);

% while g.done == false
%     val = g.next();
%     g;
%     order = val{1};
%     programs = val{2};
%     disp(order)
%     disp(programs)
%     disp(" ")
% end

%Performance testing
k_range = [2,3];
k_steps = 1;

m_range = [25,100];
m_steps = 4;

M_max_range = [50,500];%Max number of programs in a machine
M_max_steps = 10;

for M_max = M_max_range(1):M_max_range(2)/M_max_steps:M_max_range(2)
    for m = m_range(1):m_range(2)/m_steps:m_range(2)
        M = randi(M_max,1,m);
        [max_,I] = max(M);
        for k = k_range(1):k_range(2)/k_steps:min(m, k_range(2))
            disp("NeighbourhoodGenerator")
            startTime = tic;
            neighbourhood_size = 0;
            g = NeighbourhoodGenerator(k, I, M);
            while g.done == false
                g.next();
                neighbourhood_size = neighbourhood_size +1;
            end
            t = toc(startTime);
            n = sum(M);
            fprintf("For M_max = %d, n = %d, m = %d, k = %d, len(I)=%d:",...
                    [M_max, n, m, k, length(I)])
            fprintf(" |Neigh| = %d, time=%f\n", ...
               [neighbourhood_size, t])
                
            disp("NeighbourhoodGenerator2")
            startTime = tic;
            neighbourhood_size = 0;
            g = NeighbourhoodGenerator2(k, I, M);
            while g.done == false
                g.next();
                neighbourhood_size = neighbourhood_size +1;
            end
            t = toc(startTime);
            n = sum(M);
            fprintf("For M_max = %d, n = %d, m = %d, k = %d, len(I)=%d:",...
                    [M_max, n, m, k, length(I)])
            fprintf(" |Neigh| = %d, time=%f\n", ...
               [neighbourhood_size, t])
           
            mem_int = 8; % if just use int8, in bits bits
            mem_per_neigh = 2*k*mem_int;
            required_memory_bytes = neighbourhood_size*mem_per_neigh/8;
            fprintf("Mem required for naive cartesian product est: %.2e\n",...
                required_memory_bytes)
            
            fprintf("Mem required for naive cartesian product est: %.2e\n",...
                required_memory_bytes)
        end
    end
end