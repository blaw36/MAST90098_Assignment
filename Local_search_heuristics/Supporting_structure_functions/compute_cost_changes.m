%% compute_cost_changes.m
% Computes the change in machine costs for a given batch of program moves
% generated by the 'order' vector of machines chosen
%% Input:
    % order: Encodes the cycle/path that the movement takes place on.
    % programs: A matrix of ways to move programs between the machines 
        % specified in the order vector.
    % machine_start_indices: The ith value indicates which row of the
        % output_array the ith machine first appears
    % program_costs: The cost of the programs ordered as in output_array
    % num_programs: the number of rows of the matrix 'programs' (number of
        % possible ways to move programs between the machines)
    % num_selected: the number of machines involved in the movement
    % length_move: the number of programs being moved in each shuffle
%% Output:
    % changes: A matrix encoding how each machine selected in the move (as 
        % per the 'order' matrix) changes cost for each program movement
        % combination (as per the 'program' matrix)
%%
function changes = compute_cost_changes(order, programs, ...
                    machine_start_indices, program_costs, ...
                    num_rows_programs, num_selected, length_move)
    
    % If only one program, convert it to a vertical vector explicitly to
    % cover an edge case (so that indexed_program_costs can calculate its
    % dimensions properly).
    if num_rows_programs == 1
        program_costs = program_costs';
    end
                       
    % For each program move sequence in 'programs', retrieve its cost.
    % 'Programs' gives us the indices of the program we want to move from 
    % each machine. Add this index to a machine's starting index to
    % be able to lookup that program, and its cost, from the
    % 'program_costs' list.
    % Slicing order by length_move allows for cycles and paths.
    indexed_program_costs = program_costs(...
                    machine_start_indices(order(1:length_move)) ...
                    + programs-1);

    % Constructs a matrix to store the inflow and outflow of costs
    % the left column is a padded 0 column (for column difference 
    % calculations). There is a padded 0 right column for paths as well
    in_out_costs = zeros(num_rows_programs, num_selected+1);
    in_out_costs(:,2:(length_move+1)) = indexed_program_costs;

    % Checks for a cycle. If so, last will move into first for difference
    % calculation
    if length_move == num_selected
        in_out_costs(:,1) = indexed_program_costs(:,length_move);
    end
    
    % Per column diff, measures change in cost from moving programs, for
    % the machines involved (as per the 'order' vector)
    changes = - diff(in_out_costs,1,2);
end